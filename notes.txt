You can start with:
3 - search and launch executables having as input the AST we talked before. 
	You can build just a couple of test AST instantiation for testing purpose.
8 - implement redirections: you will get the redirections as a node of the AST, 
	the redirection node will be linked to (from) a command node. The command 
	not will have a input and an output field, which if not NULL will point to 
	the redirection node, which will contain in the data field the name of the infile 
	or outfile
9 - implement pipes: like pipex. The pipe will be also a node, which will have two children
	(leafs), which will be an array of two nodes: the command before the pipe as the first 
	element of the pipe and as a second node the second command or a pipe node.
14 - implement the following builtins: 
	◦ echo with option -n
	◦ cd with only a relative or absolute path
	◦ pwd with no options
	◦ export with no options
	◦ unset with no options
	◦ env with no options or arguments
	◦ exit with no options



!!!
You should limit yourself to the subject description. Anything that
is not asked is not required.
If you have any doubt about a requirement, take bash as a reference.
!!!

1) Display a prompt when waiting for a new command.
2) Have a working history.
3) Search and launch the right executable (based on the PATH variable or using a
relative or an absolute path).
4) Avoid using more than one global variable to indicate a received signal. Consider
the implications: this approach ensures that your signal handler will not access your
main data structures.(Be carefull. This global variable cannot provide any other
information or data access than the number of a received signal.
Therefore it is forbidden to use "norm" type structures in global.)
5) Not interpret unclosed quotes or special characters which are not required by the
subject such as \ (backslash) or ; (semicolon).
6) Handle ’ (single quote) which should prevent the shell from interpreting the metacharacters in the quoted sequence.
7) Handle " (double quote) which should prevent the shell from interpreting the metacharacters in the quoted sequence except for $ (dollar sign).
8) Implement redirections:
◦ < should redirect input.
◦ > should redirect output.
◦ << should be given a delimiter, then read the input until a line containing the
delimiter is seen. However, it doesn’t have to update the history!
◦ >> should redirect output in append mode.
9) Implement pipes (| character). The output of each command in the pipeline is
connected to the input of the next command via a pipe.
10) Handle environment variables ($ followed by a sequence of characters) which
should expand to their values.
11) Handle $? which should expand to the exit status of the most recently executed
foreground pipeline.
12) Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash.
13) In interactive mode:
	◦ ctrl-C displays a new prompt on a new line.
	◦ ctrl-D exits the shell.
	◦ ctrl-\ does nothing.
14) Your shell must implement the following builtins:
	◦ echo with option -n
	◦ cd with only a relative or absolute path
	◦ pwd with no options
	◦ export with no options
	◦ unset with no options
	◦ env with no options or arguments
	◦ exit with no options
	
The readline() function can cause memory leaks. You don’t have to fix them. But
that doesn’t mean your own code, yes the code you wrote, can have memory
leaks.

